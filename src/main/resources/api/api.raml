#%RAML 1.0
title: Student System API
version: v1
mediaType: application/json

uses:
  types: types/datatype-library.raml
  traits: traits/error-handling.raml

/student/register:
  post:
    is: [traits.errorHandling]
    description: Register a new student in Salesforce.
    body:
      application/json:
        type: types.Student
        example: !include examples/student-example.json
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "studentId": "0031X00000abcdeQAD",
                "message": "Student registered successfully"
              }

/students/marks/new:
  get:
    description: Get all student marks records newly inserted since a given timestamp
    queryParameters:
      since:
        type: datetime
        required: true
        example: 2025-08-02T00:00:00Z
    responses:
      200:
        body:
          application/json:
           example: !include examples/students-response.json
           
/students/pending-report:
  get:
    description: Retrieve students whose 5-day course is complete but report card is not yet generated.
    responses:
      200:
        body:
          application/json:
            example: [
              {
                "id": "STU12345",
                "name": "John Doe",
                "email": "john@example.com",
                "days_left": 0,
                "report_file_path": null
              }
            ]

    
/students:
  get:
    is: [traits.errorHandling]
    description: |
      - Get student details from Database.
      - If `id` is provided, return specific student.
      - If `day_left` is provided, filter by remaining days.
      - If `report_file_path` is provided, filter by that.
    queryParameters:
      id:
        type: string
        required: false
        description: Fetch a specific student by ID
      days_left:
        type: integer
        required: false
        description: Filter students based on days left
      report_file_path:
        type: string
        required: false
        description: Filter students with matching report file path
    responses:
      200:
        body:
          application/json:
            type: types.StudentResponse[]
            example: !include examples/student-response-example.json
/students/{ID}:
  uriParameters:
    ID:
      type: string
      required: true
  patch:
    is: [traits.errorHandling]
    description: Update student section, accumulated score or file path.
    body:
      application/json:
        type: types.UpdateStudent
        example: !include examples/update-student-example.json
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "message": "Student updated successfully"
              }

  delete:
    is: [traits.errorHandling]
    description: Delete a student by ID.
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "message": "Student deleted successfully"
              }

/students/empty-record:
  post:
    is: [traits.errorHandling]
    description: insert empty record.
    body:
      application/json:
        example: !include examples/students-response.json
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "message": "Score updated" 
                }


/student/{ID}/get-score:
  get:
    is: [traits.errorHandling]
    queryParameters:
      day:
        type: integer
        minimum: 0
        maximum: 5
        required: false
    description: Fetch all scores for a student.
    responses:
      200:
        body:
          application/json:
            example: !include examples/student-scores-example.json

/student/create:
  post:
    is: [traits.errorHandling]
    description: Create a day 1 record for the student in the database.
    body:
      application/json:
        type: types.CreateRecord
        example: !include examples/create-day1-record-example.json
    responses:
      201:
        body:
          application/json:
            example: |
              {
                "message": "Record created"
              }
              
/student/{ID}/update-score/{day}:
  uriParameters:
    ID:
      type: string
      required: true
    day:
      type: integer
      required: true
      minimum: 1
      maximum: 5
  patch:
    is: [traits.errorHandling]
    description: Update student score for a given day.
    body:
      application/json:
        type: types.ScoreInput
        example: !include examples/score-input-example.json
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "message": "Score updated" 
                }
